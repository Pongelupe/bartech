# The following types define the data model of the example service
# based on which the GraphQL API is generated

type User @model {
  id: ID! @isUnique
  user: String! @isUnique
  password: String!
}

type Produto @model {
  id: ID! @isUnique
  nome: String!
  preco: Float!
  quantidadeEstoque: Int!
  codigoDeBarras: String @isUnique
  item: ItemVenda @relation(name: "ProdutosOnItemVenda")
}

type Mesa @model {
  id: ID! @isUnique
  vendas: [Venda!]! @relation(name: "MesaOnVendas")
}

type Venda @model {
  id: ID! @isUnique
  data: DateTime!
  finalizada: Boolean! @defaultValue(value: "false")
  quitada: Boolean! @defaultValue(value: "false")
  mesa: Mesa! @relation(name: "MesaOnVendas")
  itensVenda: [ItemVenda!]! @relation(name: "ItensVendaOnVenda")
  penduras: [Pendura!]! @relation(name: "PenduraOnVenda")
  pagamentos: [Pagamento!]! @relation(name: "VendaOnPagamento")
}

type ItemVenda @model {
  id: ID! @isUnique
  quantidade: Int!
  desconto: Float @defaultValue(value: 0.0)
  cancelado: Boolean @defaultValue(value: false)
  venda: Venda! @relation(name: "ItensVendaOnVenda")
  produtos: [Produto!]! @relation(name: "ProdutosOnItemVenda") @defaultValue(value: [])
}

type Pendura @model {
  id: ID! @isUnique
  data: DateTime!
  valor: Float!
  valorPagto: Float @defaultValue(value: 0.0)
  venda: Venda! @relation(name: "PenduraOnVenda")
  cliente: Cliente! @relation(name: "PendurasOnCliente")
}

type Cliente @model {
  id: ID! @isUnique
  nome: String!
  apelido: String!
  cpf: String!
  createdAt: DateTime!
  telefone: String!
  penduras: [Pendura!]! @relation(name: "PendurasOnCliente")
  pagamentos: [Pagamento!]! @relation(name: "PagamentosOnCliente") @defaultValue(value: [])
}

type Pagamento @model {
  id: ID! @isUnique
  data: DateTime!
  valor: Float!
  cliente: Cliente @relation(name: "PagamentosOnCliente")
  venda: Venda @relation(name: "VendaOnPagamento")
  formaPagamento: FormaDePagamento!
}

enum FormaDePagamento {
  DINHEIRO,
  CARTAO
}

type Caixa @model {
  id: ID! @isUnique
  dataAbertura: DateTime!
  dataFechamento: DateTime!
  valorAbertura: Float!
  valorDigitado: Float!
  valorCalculado: Float!
}
